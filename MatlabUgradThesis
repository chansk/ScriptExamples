clear
clc

% Reading in predictive temperature data from CCSM4 model
temp = ncread('tas_annual_BCSD_historical_r1i1p1_MeanModel_1950-2005.nc','tas');
temp(:,:,57:150) = ncread('tas_annual_BCSD_rcp85_r1i1p1_MeanModel_2006-2099.nc','tas');
for m = 1:size(temp,1)
    for n = 1:size(temp,2)
        for o = 1:size(temp,3)
            % Changing errors in temperature data from values of -999 to
            % values of NaN
            if temp(m,n,o) < -900
                temp(m,n,o) = NaN;
            end
        end
    end
end

% Reading in latitude, longitude, and elevation values
lat = ncread('tas_annual_BCSD_historical_r1i1p1_CCSM4_1950-2005.nc','lat');
lon = ncread('tas_annual_BCSD_historical_r1i1p1_CCSM4_1950-2005.nc','lon');
elev = ncread('elevation_0.25deg.nc','elev');
lat = repmat(lat',1440,1);
lon = repmat(lon,1,720);

% Selecting our area of interest for latitude, longitude, elevation, and
% temperature values
firstrow = 900; % lon of 224.8750 = -135.1250
lastrow = 1260; % lon of 314.8750 = -45.1250
firstcol = 361; % lat of 0.1250
lastcol = 569; % lat of 52.1250
lat1 = lat(firstrow:lastrow, firstcol:lastcol);
lon1 = lon(firstrow:lastrow, firstcol:lastcol);
elev1 = elev(firstrow:lastrow, firstcol:lastcol);
lat1 = lat1';
lon1 = lon1';
elev1 = elev1';
for o = 1:size(temp,3)
    temp1(:,:,o) = temp(firstrow:lastrow, firstcol:lastcol, o);
end

% Turns orientation of temperature matrix so it is oriented the same way as
% coordinate matrices (rows are latitude, columns are longitude
temp1 = permute(temp1,[2 1 3]);

% Creating a mask of land points represented by 1's, ocean points
% represented by NaNs
mask = elev1./elev1;
% Creating a flip of the mask so land points represented by NaNs, ocean
% points represented by 1's
for m = 1:size(mask,1)
    for n = 1:size(mask,2)
        if isfinite(mask(m,n)) == 1
            maskflip(m,n) = NaN;
        else
            maskflip(m,n) = 1;
        end
    end
end
% Creating coordinate matrices of type "double" to plot ocean points later
% as grey background in final images
a = lon1.*maskflip;
b = lat1.*maskflip;
a = a(:);
b = b(:);
a = double(rmmissing(a));
b = double(rmmissing(b));

% Adding the island and large peninsula points to mask to be eliminated
% from the data set
islands = xlsread('ExtraPts.xls');
for n = 1:length(islands)
    mask(round(4*islands(n,2)+0.5), round(4*islands(n,1)-898.5)) = NaN;
end

% Constraining new elevation matrix to only land points
elev2 = elev1.*mask;

% Temperature elevation correction
anom = repmat([elev2*0.006],1,1,size(temp1,3));
temp1_sl = temp1+anom;

% Creates proportion matrix between east and west boundaries
lon2 = lon1.*mask;
prop = [];
for m = 1:size(lon2,1)
    lon3 = isfinite(lon2);
    TotSum = sum(lon3,2);
    x = 0;
    for n = 1:size(lon2,2)
        if isfinite(lon2(m,n))
            x = x + 1;
        end
        prop(m,n) =  x / TotSum(m);
    end
end
prop = prop.*mask;

% Closes the gap between proportion points separated by water, so that they
% do not get filled when interpolating to finer resolution in next step
    % This is necessary because the prior step only identified the final
    % east and west boundaries of land points at every latitude
prop1 = prop;
for m = 1:size(prop,1)
    for n = 1:size(prop,2)-1
        if isfinite(prop(m,n))-isfinite(prop(m,n+1)) == 1 && prop(m,n) < 1 % true if point is on an eastern coastline, but not the easternmost coastline
            z = n;
            while isfinite(prop(m,z+1)) == 0
                z = z+1;
            end
                prop1(m,n) = prop(m,z+1)-0.0001;
        end
    end
    for n = 1:size(prop,2)-1
        if isfinite(prop(m,n))-isfinite(prop(m,n+1)) == 1 && prop(m,n) < 1 % rerun loop to deal with single points/islands (i.e., propagates updated proportion gaps westward)
            z = n;
            while isfinite(prop(m,z+1)) == 0
                z = z+1;
            end
                prop1(m,n) = prop1(m,z+1)-0.0001;
        end
    end
end
 
           
% Reprojects temperature data from lat/lon into proportion space by
% creating extra points at most latitudes to create equal number of points
% at each latitude
    % Longitude values are assigned to space points equally across land
    % at each latitude
        % Temperature values are assigned based on what temperature would
        % be at the point's coordinates by interpolating between original
        % temperatures at nearby points
        
w = max(nansum(mask,2)); % finds the highest number of points between coasts
xi = linspace(0,1,w); % makes a one-row matrix of 0 to 1 in steps of 1/w
for o = 1:size(temp1_sl,3)
    for m = 1:size(temp1_sl,1)
        temp_data = [];
        prop_data = [];
        lat_data = [];
        lon_data = [];
        for n = 1:size(temp1_sl,2)
            if isfinite(temp1_sl(m,n,o)) == 1
                temp_data = [temp_data temp1_sl(m,n,o)];
                prop_data = [prop_data prop1(m,n)];
                lat_data = [lat_data lat1(m,n)];
                lon_data = [lon_data lon2(m,n)];
            end
        end
        temp_prop(m,:,o) = interp1(prop_data,temp_data,xi);
        lat_prop(m,:,o) = interp1(prop_data,lat_data,xi);
        lon_prop(m,:,o) = interp1(prop_data,lon_data,xi);
    end
end

% Values could not be assigned to points created from first coastline to
% the first point with data, so were given NaN
    % This assigns those points with the temperature value of the first
    % data point
for o = 1:size(temp_prop,3)
    for m = 1:size(temp_prop,1)
        for n = 1:size(temp_prop,2)
            if isnan(temp_prop(m,n,o)) == 1
                temp_prop(m,1:n,o) = temp_prop(m,n+1,o);
                lat_prop(m,1:n,o) = lat_prop(m,n+1,o);
                lon_prop(m,1:n,o) = lon_prop(m,n+1,o);
            end
        end
    end
end

% Smoothing lines of proportion from North to South in the base year using
% a polynomial line of best fit
    % Achieves more consistent warming
base = nanmean(temp_prop(:,:,1:30),3);
base_fit = NaN(size(base,1),size(base,2));
xi = [1:size(base,1)]';
for n = 1:size(base,2)
    P = polyfit(xi,base(1:end,n),3);
    base_fit(1:209,n) = P(1)*xi.^3+P(2)*xi.^2+P(3)*xi+P(4);
end

% Forces any negative trends in polynomial line to be slightly positve
base_fit2 = base_fit;
for n = 1:size(base_fit2,2)
    for m = size(base_fit2,1)-1:-1:1
        if base_fit2(m,n) <= max(base_fit2(m+1:end,n))
            base_fit2(m,n) = max(base_fit2(m+1:end,n))+0.01;
        end
    end
end

% Converts future temperaturess to anomalies from the base year.
for o = 1:size(temp_prop,3)
    temp_prop_anom(:,:,o) = squeeze(temp_prop(:,:,o)) - base;
end

% Calculates coordinates of which point to move to in every year after base
for o = 2:size(temp_prop_anom,3)
    for n = 1:size(temp_prop_anom,2)
        for m = 209:-1:1
            k = 209;
            while temp_prop_anom(m,n,o)+base_fit2(m,n) > base_fit2(k,n) && k>1
                k = k-1;
            end
            lat_prop(m,n,o) = lat_prop(k,n,1);
            lon_prop(m,n,o) = lon_prop(k,n,1);
        end
    end
end

% Turns lon_prop matrix into same longitudes as the shapefile so they can
% be plotted on the same figure.
for x = 1:size(lon_prop,1)
    for y = 1:size(lon_prop,2)
        for z = 1:size(temp_prop,3)
            lon_prop(x,y,z) = lon_prop(x,y,z) - 360;
        end
    end
end

% Grabs every fourth new lat and lon points through time (Control Points)
j = 4; % frequency of control points
for m = 1:round(size(lat_prop,1)/j)
    for n = 1:round(size(lat_prop,2)/j)
        lat_prop_cp(m,n,:) = lat_prop(m*j-(j-1),n*j-(j-1),:);
        lon_prop_cp(m,n,:) = lon_prop(m*j-(j-1),n*j-(j-1),:);
    end
end

% Reads in shapefile
S = shaperead('ne_110m_admin_1_states_provinces/ne_110m_admin_1_states_provinces.shp');
% Removes Hawaii and Alaska (not part of contiguous US)
S(51) = [];
S(4) = [];
% Assigns four control points to each state boundary point, then assigns
% each control point a ratio as to how much it controls its boundary point
for q = 1:49
    x = rmmissing(S(q).X);
    y = rmmissing(S(q).Y);
    
    % For each state boundary point, finding row and column numbers of 
    % latitudes and longitudes of control points
    for t = 1:size(x,2)
        % Finding the latitude for CP slightly higher than boudary point
            % All columns are the same, choice of column 1 is irrelevant
        u = 1;
        if y(t) > lat_prop_cp(size(lat_prop_cp,1),1,1)
            u = size(lat_prop_cp,2);
        elseif y(t) < lat_prop_cp(1,1,1)
            u = 2;
        else
            while y(t) > lat_prop_cp(u,1,1)
                u = u+1;
            end
        end
        
        top_row = u;
        bot_row = u-1;
        
        % Finding the longitude for CP in the latitude slightly higher than
        % the boudary point
        v = 1;
        if x(t) > lon_prop_cp(top_row,size(lon_prop_cp,2),1)
            v = size(lon_prop_cp,2);
        elseif x(t) < lon_prop_cp(top_row,1,1)
            v = 2;
        else
            while x(t)>lon_prop_cp(top_row,v,1)
                v = v+1;
            end
        end

        % Coordinates for CP in top column, top row (top_col_tr)
        X1 = lon_prop_cp(top_row,v,1);
        Y1 = lat_prop_cp(top_row,v,1);
        % Coordinates for CP in bottom column, top row (bot_col_tr)
        X2 = lon_prop_cp(top_row,v-1,1);
        Y2 = lat_prop_cp(top_row,v-1,1);

        % Finding the longitude for CP in the latitude slightly lower than
        % the boudary point
        w = 1;
        if x(t) > lon_prop_cp(bot_row,size(lon_prop_cp,2),1)
            w = size(lon_prop_cp,2);
        elseif x(t) < lon_prop_cp(bot_row,1,1)
            w = 2;
        else
            while x(t)>lon_prop_cp(bot_row,w,1)
                w = w+1;
            end
        end

        % Coordinates for CP in top column, bottom row (top_col_br)
        X4 = lon_prop_cp(bot_row,w,1);
        Y4 = lat_prop_cp(bot_row,w,1); 
        % Coordinates for CP in bottom column, bottom row (bot_col_br
        X3 = lon_prop_cp(bot_row,w-1,1);
        Y3 = lat_prop_cp(bot_row,w-1,1);
      
        % If longitude of state boundary points is greater than
        % east or west bounds of coasts in our shapefile, then use the 
        % following longitudes as control points
            % For the top row
        if x(t) < lon_prop_cp(top_row,1,1) 
            X2 = -130;
            X1 = lon_prop_cp(top_row,v-1,1);
        elseif x(t) > lon_prop_cp(top_row,size(lon_prop_cp,2),1)
            X1 = -60;
            X2 = lon_prop_cp(top_row,v,1);
        end
            % For the bottom row
        if x(t) < lon_prop_cp(bot_row,1,1) 
            X3 = -130;
            X4 = lon_prop_cp(bot_row,w-1,1);
        elseif x(t) > lon_prop_cp(bot_row,size(lon_prop_cp,2),1)
            X4 = -60;
            X3 = lon_prop_cp(bot_row,w,1);
        end
        
        % Assigning proportion of each control point's influence on boundary 
        % point in the X direction (longitude)
        XProp1 = abs(X2 - x(t))/abs(X1-X2);
        XProp2 = abs(X1 - x(t))/abs(X1-X2);
        XProp3 = abs(X4 - x(t))/abs(X3-X4);
        XProp4 = abs(X3 - x(t))/abs(X3-X4);
               
        % Assigning proportion of each control point's influence on boundary 
        % point in the Y direction (latitude)
        YProp1 = abs(Y4 - y(t))/abs(Y1-Y4);
        YProp2 = abs(Y3 - y(t))/abs(Y2-Y3);
        YProp3 = abs(Y2 - y(t))/abs(Y2-Y3);
        YProp4 = abs(Y1 - y(t))/abs(Y1-Y4);
        
        % Assigning total ratio of each control point's influence on
        % boundary point as a product of influence in X and Y directions 
        R(q,t) = XProp1*YProp1;
        RR(q,t) = XProp2*YProp2;
        RRR(q,t) = XProp3*YProp3;
        RRRR(q,t) = XProp4*YProp4;
        
       % For each year, assigns new positions of CPs and boundary points
       for z = 1:size(lon_prop_cp,3)
           % New lon and lat coord's of control points are pulled into X1 
           % through X4 and Y1 through Y4, respectively
           if x(t) > lon_prop_cp(top_row,size(lon_prop_cp,2),1)
               X1 = -60;
               X2 = lon_prop_cp(top_row,v,z);
           elseif x(t) < lon_prop_cp(top_row,1,1)
               X1 = lon_prop_cp(top_row,v-1,z);
               X2 = -130;
           else
               X1 = lon_prop_cp(top_row,v,z);
               X2 = lon_prop_cp(top_row,v-1,z);
           end
           if x(t) > lon_prop_cp(bot_row,size(lon_prop_cp,2),1)
               X4 = -60;
               X3 = lon_prop_cp(bot_row,w,z);
           elseif x(t) < lon_prop_cp(bot_row,1,1)
               X4 = lon_prop_cp(bot_row,w-1,z);
               X3 = -130;
           else
               X4 = lon_prop_cp(bot_row,w,z);
               X3 = lon_prop_cp(bot_row,w-1,z);
           end
                 
           Y1 = lat_prop_cp(top_row,v,z);
           Y2 = lat_prop_cp(top_row,v-1,z);
           Y3 = lat_prop_cp(bot_row,w-1,z);
           Y4 = lat_prop_cp(bot_row,w,z); 
         
           % New positions of boundary points are assigned by multiplying
           % ratio of influence by control point's location for all four
           % having influence over each boundary point
           XX(q,t,z) = R(q,t) * X1 + RR(q,t) * X2 + RRR(q,t) * X3 + RRRR(q,t) * X4;
           YY(q,t,z) = R(q,t) * Y1 + RR(q,t) * Y2 + RRR(q,t) * Y3 + RRRR(q,t) * Y4;
       end        
    end
end

% Checking every year to turn points at longitude of 0 to NaNs, which are
% ignored for plotting
for e = 1:49
    for f = 1:size(YY,2)
        for z = 1:150
            if XX(e,f,z) == 0
                XX(e,f,z) = NaN;
                YY(e,f,z) = NaN;
            end
        end
    end
end

% Creating color map with "hot" colors randomly assigned to states
cmap = hot(49);
randrows = randperm(49,49);
for z = 1:150
    % Plots grey background of each state in year 1
    for e = 1:49
        k = polyshape(XX(e,:,1),YY(e,:,1));
        h = plot(k);
        h.FaceColor = [0.95,0.95,0.95];
        alpha(1)
        hold on
    end
    % Plots each state boundary, filled with colors in each year
    for e = 1:49
        k = polyshape(XX(e,:,z),YY(e,:,z));
        h = plot(k);
        h.FaceColor = cmap(randrows(e),:);
        alpha(1);
        hold on
    end
    % Scatter creates grey background of water
    scatter(a-360,b,'square','filled','MarkerFaceColor',[0.7,0.7,0.7]);
    xlim([-130 -50])
    ylim([0 50])
    f = strcat({' '}, num2str(z+1949));
    title(f)
    ax = gca;
    ax.FontSize = 14;
    pause(0.5);
    % Expands figure to fill full screen
        % If not expanded before being saved, video will be blurry
    set(frame_h,'Maximized',1); 
    % Pauses to label with year and save figure
    pause(0.5);
    s = num2str(z+1949);
    bot =[s,'.png']; 
    saveas(gca,bot);
    clf
end

% Opens the video writer app, and writes frames to an MP4 video
writerObj = VideoWriter('MeltMap','MPEG-4');
% Sets frames per second
writerObj.FrameRate= 5;
open(writerObj);
for ii = 1950:2099
  % Uses names of all PNG files to create video frames
  s = num2str(ii);
  filename = sprintf('%s.png',s);
  thisimage = imread(filename);
  writeVideo(writerObj, thisimage); 
end
close(writerObj)
close all
